---
title: Confirmatory Factor Analyses
author: "Sven Rieger"
email: "sven.rieger@uni-tuebingen.de"
email-obfuscation: javascript
date: 12/01/23
date-format: long
published-title: "Last updated on"
abstract: "This material introduces confirmatory factor analyses (CFA) as one possible measurement model that relates observed measures (or indicators) with latent variables (also called unobserved factors). It relies on Chapter 22 *Confirmatory Factor Analysis* [@brown2012] of the *Handbook of Structural Equation Modeling* [@hoyle2012]. There is also annotated code to implement CFA models with the `lavaan` package [@R-lavaan]."
format:
  html: default
  revealjs:         
    output-file: cfa-reveal.html
    footer: "[Back to website]"
    self-contained: true
    smaller: true
    scrollable: true
    navigation-mode: linear
    progress: true
    keyboard: true
    controls: true
    controls-tutorial: true
    controls-layout: edges
    mouse-wheel: false
    slide-number: c/t
    show-slide-number: all
    reference-location: document
    theme: [simple, "../revealjs-styles.scss"]
---

::: {.content-hidden when-format="revealjs"}

## Revealjs Presentation

If you want to see the presentation in full screen go to **Other Formats** on the right. The presentation can be downloaded <a href="cfa-reveal.html" download>here</a>.

<div class="container">
  <iframe class="responsive-iframe" src="cfa-reveal.html"></iframe>
</div> 

:::

## Preface: Software

- The following packages are used:

```{r}
#| label: cfa-pkg
#| echo: true
#| code-fold: false
#| output-location: column
#| code-line-numbers: 1-2
cfaPkg <- c("lavaan", # <1>
            "flextable") # <1>
```

::: {.fragment}

- Install packages when not already installed:

```{r}
#| label: cfa-install
#| echo: true
#| code-fold: false
#| results: hide
lapply(cfaPkg,
       function(x)
        if(!x %in% rownames(installed.packages())) {
          install.packages(x) 
          }
      )

```

:::

::: {.fragment}

- Load (a subset of) the required package(s) into the `R` session.

```{r}
#| label: load-descr-pkg
#| echo: true
#| code-fold: false
#| output-location: column
library(lavaan)
library(flextable)
```

:::

## Preface: Data

To demonstrate, we use the first measurement time point of a simulated data set. The data simulation is described in the [Example Data](../example-data/data-latent-state.qmd) section. Alternatively, you can download the `wideLSdat.RDS` file <a href="../example-data/wideLSdat.RDS" download>here</a>.



```{r}
#| label: import-wideLSdat-cfa
#| code-fold: false
#| code-line-numbers: false

wideLSdat <- readRDS("../example-data/wideLSdat.RDS")
```

## Confirmatory Factor Analysis (CFA): Overview

1. [Introduction](#cfa-intro) & [Purposes](#purp-cfa) of CFA 
2. [Parameters & graphical visualization](#cfa-param) 
3. [Estimation](#cfa-param-est) of parameters 
4. Model [identification](#model-ident-1) 
5. Model [evaluation](#model-eval) 
6. [Implementation](#lavaan-cfa) in the R package lavaan [@R-lavaan]

## CFA: Introduction {#cfa-intro}

> Confirmatory factor analysis” (CFA) is a type of structural equation modeling that deals specifically with measurement models, that is, the relationships between observed measures or “indicators” (e.g., items, test scores, behavioral observation ratings) and latent variables or “factors. [@brown2012, p.361]

**Goal:** to establish the number and nature of factors (i.e., latent variables) that account for the variation and covariation among a set of indicators

- the indicators (i.e., observed measures) are intercorrelated because they share a common cause (or with other words: are influenced by the same underlying construct)

## Purposes of CFA {#purp-cfa}

- Psychometric evaluation (e.g., Reliability; for scale reliability see [here](#scale-rel))

- Detection of method effects (e.g., covariation among indicators, after the latent variable was partialed out)

- Construct validation (e.g., convergent and discriminant validity); see also multi-trait-multi-method approaches [@campbell1959]

- Evaluation of measurement invariance (see [here](#mi-dif))

- Scale development

## CFA parameters & graphical visualization {#cfa-param}

:::: {.columns}
::: {.column width="49%"}

<br>

- Variance of the latent variable: $\Psi$ 
- Intercepts: $\nu$
- Factor loadings: $\lambda$ 
- Error variances: $\theta$ 
:::

::: {.column width="2%"}

:::

::: {.column width="49%"}

![](../../images/CFA.png)

$$Y_i = \nu_i + \lambda_i\eta + \theta_i$$

:::
::::

::: aside

$\Psi$: [Psi](<https://en.wikipedia.org/wiki/Psi_(Greek)>)

$\nu$: [Nu](<https://en.wikipedia.org/wiki/Nu_(letter)>)

$\lambda$: [Lambda](<https://en.wikipedia.org/wiki/Lambda>)

$\theta$: [Theta](<https://en.wikipedia.org/wiki/Theta>)
:::

## Scale Reliability {#scale-rel}

- There is some debate about Cronbach’s Alpha Reliability Coefficient [@sijtsma2009; @revelle2009]

> Even though the pages of [Psychometrika](<https://www.springer.com/journal/11336>){target="_blank"} have been filled over the years with critiques and cautions about coefficient α and have seen elegant solutions for more appropriate estimates, few of these suggested coefficient are used.” (p.2) 

- An alternative: Scale reliability 
  - [...] “reliability“ as the ratio of true variance to observed variance [...]” [@raykov2015]

- Scale reliability: $\rho = \frac{(\lambda_1+\dots+\lambda_k)^2}{(\lambda_1+\dots+\lambda_k)^2+\theta_1+\dots+\theta_k}$

::: aside

see also @mcneish2017; @savalei2019

:::

## Estimation of (CFA-) Model Parameters {#cfa-param-est}

- Model parameters are estimated on the basis of the empirical variances, covariances, and means 

- This is done by minimizing the discrepancy between a sample variance-covariance matrix $S$ and a model-implied variance-covariance matrix $\Sigma(\theta)$

- Fit function for ML (without means): $$F_{ML}=log|\Sigma(\theta)|+tr(S\Sigma^{-1}(\theta))-log|S|-p$$
  - $\theta$ = Model parameters
  - $p$ = number of parameters of observed variables
  - $tr$ = trace (spur)

## Model identification I {#model-ident-1}

**Going from the known to the unknown** [@kenny2012]

- Known information: number of elements in the variance-covariance matrix and the mean vector
  - In general with $k$ measured variables, there are...
    - k(k+1)/2 knowns (without meanstructure)
    - k(k+3)/2 knowns (with meanstructure) 

- Unknown information: all parameters that need to be estimated

- Correspondence of known and unknown information determines whether a model is
  - underidentified
  - just-identified
  - overidentified
  

## Model identification II {#model-ident-2}

- Underidentified
  - $10 = 2x + y$
  - One piece of information; no unique solution (i.e., infinite solutions) for x and y 

- just-identified (also referred as a saturated model)
  - $10 = 2x + y2 = x – y$
  - Two pieces of knowns; number of unknowns and knowns is equal

- Overidentified
  - $10 = 2x +y2 = x – y5 = x + 2y$
  - More known than unknown information

**Goal of model testing:** Overidentification (i.e., Falsifiability; degree of wrongness &#8594; Fit indices)

## Model identification III {#model-ident-3}

- Common SEM (!) situation
  - constructs have multiple indicators,
  - most indicators load only on one construct (i.e., “simple structure”),
  - each indicator has the same possible response scale (i.e., range)

- @little2006 describe 3 methods
  - Reference-Group Method: fixing the latent mean and the latent variance
  - Marker-Variable Method: fixing intercept to zero and loading of one indicator to 1
  - Effects-Coding Method: indicator intercepts sum to 0 the set of loadings sum to average 1

## Model identification IV {#model-ident-4}

**Effects-Coding Method:** indicator intercepts sum to 0 the set of loadings sum to average 1

:::: {.columns}
::: {.column width="35%"}

- loadings: $$\sum_{k=1}^{K} \lambda_{k} = K$$

- intercepts: $$\sum_{k=1}^{K} \tau_{k} = 0$$

:::

::: {.column width="2%"}
:::

::: {.column width="63%"}

<br> 

```{r}
#| label: example-effect-code
#| eval: false
#| echo: true
#| code-fold: false
#| code-line-numbers: false
'
# a measurement model with 3 items
...
# constraints
lam1 == 3-lam2-lam3
nu1 == 0-nu2-nu3
'

```
:::
::::

## Model identification V {#model-ident-5}


> This method uses the effects constraints to provide an optimal balance across the possible indicators to establish the scale for the estimated parameters, where the average intercept is zero, but no individual manifest intercept is fixed to be zero. Similarly, the loading parameters are estimated as an optimal balance around 1.0, but no individual loading is necessarily constrained to be 1.0. This method results in estimates of the latent variances that are the average of the indicators’ variances accounted for by the construct, and the latent means are estimated as optimally weighted averages of the set of indicator means for a given construct. In other words, the estimated latent variances and latent means reflect the observed metric of the indictors, optimally weighted by the degree to which each indicator represents the underlying latent construct.
[@little2006, p.63]


## Model evaluation {#model-eval}

**Common fit indices [@hu1998; @hu1999] are ...** 

- $\chi^2$ (Chi-square test statistic; cutoff: p < .05) 

- CFI (Comparative Fit Index; cutoff:  > .95) 
  
- TLI (Tucker-Lewis Index; cutoff: > .95) 

- RMSEA (Root Mean Square Error of Approximation; cutoff: < .06) 

- SRMR (Standardized Root Mean Square Residual; cutoff: < .08) 

- Sometimes: AIC (Akaike Information Criterion) & BIC (Bayesian Information Criterion); no cutoffs 

::: aside
for a critique see @mcneish2021
:::

## Lavaan & Mplus syntax overview

| Formula type | Lavaan Operator | Mplus statement | Mnemonic |
| :----------- | :------: | :------: | :------- |
|latent variable definition | `=~` | `by` | is measured by |
| regression | `~` | ```on``` | is regressed on |
| (residual) (co)variance | `~~` | `with` | is correlated with |
| intercept | `~ 1` | `[ ]` | intercept |
|           |       |      |           |
| -- | `:=` | `=` | define functions |
| -- | `==` | `==` | constraints |

::: aside

lavaan syntax see [here](<https://lavaan.ugent.be/tutorial/syntax1.html>){target="_blank"}

Mplus syntax see [here](<https://www.statmodel.com/html_ug.shtml>){target="_blank"}

:::


## CFA: lavaan implementation I {#lavaan-cfa-1}

```{r}
#| label: cfa-1
#| echo: true
#| code-line-numbers: 2|3|5-7|9-11|13|14|16-18
#| output-location: column
# <0>
CfaMod <- ' # <1>
eta1 =~ lam1*Y11 + lam2*Y21 + lam3*Y31 # <2>

Y11 ~ nu1*1 # <3>
Y21 ~ nu2*1 # <3>
Y31 ~ nu3*1 # <3>

Y11 ~~ theta1*Y11 # <4>
Y21 ~~ theta2*Y21 # <4>
Y31 ~~ theta3*Y31 # <4>
 
eta1 ~ 0*1 # <5>
eta1 ~~ 1*eta1 #psi # <6>

rel := (lam1+lam2+lam3)^2 / # <7>
       ( (lam1+lam2+lam3)^2 + # <7>
         theta1+theta2+theta3 ) # <7>
'
```

1. Use a string (i.e., `' '`) to specify the model; provide a recognizable and meanigful name (here: `CfaMod`)
2. Specifiy the measurement model using the *is measured by* operator: `=~`
3. (Optional) Specify the intercept of the item indicators using the intercept operatior: `~ 1`
4. (Optional) Specify the residual variances of the item indicators using the *is correlated with* operator: `~~`
5. (Optional) Specify the latent mean of the latent variable using the *intercept* operator: `~ 1`
6. (Optional) Specify the variance of the latent variable using the *is correlated with* operator: `~~`
7. (Optional) Use the model constraint option, to calculate the [scale reliability](#scale-rel) [@raykov2015]

::: {style="font-size: 24px;"}
:::


## CFA: lavaan implementation II {#lavaan-cfa-2}

```{r}
#| label: cfa-2
#| echo: true
#| code-line-numbers: 2|3|4|5|6
#| code-annotations: below
#| output-location: column
# <0>
fitCfaMod <- sem( # <1>
    model = CfaMod, # <2>
    data = wideLSdat, # <3>
    estimator = "ML", # <4>
    std.lv = TRUE # <5>
    )
```

1. To fit the model, you may want to use the `sem` (or `cfa`) function
2. In the `model` argument, you need to provide the specified model as a string (here: `CfaMod`).
3. The dataset is provided in the `data` argument.
4. Choose an estimator (default for continuous variable is  `ML`); in realworld scenarios you may want to choose a robust variant (e.g., `MLR`).
5. To fix the variance of the latent variabe to 1, we set the `std.lv` argument to `TRUE`. 

## CFA: lavaan implementation III-I {#lavaan-cfa-3-1}


```{r}
#| label: cfa-syn-3-1
#| echo: true
#| eval: false
#| code-line-numbers: 2|3|4|5
#| output-location: column 
# <0>
summary( # <1>
    fitCfaMod, # <1>
    fit = TRUE, # <2>
    standardized = TRUE, # <3>
    rsq = TRUE # <4>
    )
```

1. To retrieve the results via the `summary` function (display only), you need to provide the object of the fitted model (here: `fitCfaMod`)
2. The `fit` argument: Whether the typical fit indices should be printed.  
3. The `standardized` argument: Whether standardized solutions should be printed.
4. The `rsq` argument: Whether $R^2$ should be printed.

<br>

The results are printed on the next [slide](#lavaan-cfa-3-2).


## CFA: lavaan implementation III-II {#lavaan-cfa-3-2}

```{r}
#| label: cfa-syn-3-2
#| echo: false
#| eval: true

summary( 
    fitCfaMod, 
    fit = TRUE, 
    standardized = TRUE, 
    rsq = TRUE 
    )
```


## CFA: lavaan implementation IV

There are other ways to inspect or extract the results of the fitted model object

- [Fit indices](#model-eval): `fitMeasures` function
- Parameter: `parameterEstimates` function
- Inspect/extraction function: `lavInspect`
  - `lavInspect(object, what = "coef")`
  - `lavInspect(object, what = "fit")`
  - `lavInspect(object, what = "sampstat")`
  - `lavInspect(object, what = "implied")`
  - ...

## CFA: lavaan implementation: parameterEstimates

The `parameterEstimates` is designed to extract the estimated parameters of the model.

```{r}
#| label: cfa-param
#| echo: true
#| code-line-numbers: 1|2-4|5|6
#| output-location: fragment
cfaParm <- parameterEstimates(fitCfaMod,
                              se = TRUE,
                              zstat = TRUE,
                              pvalue = TRUE,
                              ci = TRUE,
                              standardized = FALSE,
                              rsquare = TRUE)
cfaParm[cfaParm$label == "rel","rhs"] <- "" # just cosmetic
cfaParm
```


## CFA: lavaan implementation V: Fit indices

The `fitMeasures` is designed to extract the fit indices of the model.

```{r}
#| label: cfa-fit-1
#| echo: true
#| code-line-numbers: 1|2|3
#| output-location: fragment
cfaFit <- fitMeasures(fitCfaMod)
#names(cfaFit) get names
cfaFit[c("npar", "chisq", "df", "pvalue", "cfi", "rmsea")]
  


```



## Make a CFA Table 

```{r}
#| output-location: column-fragment
cfaResults <- cfaParm |>
  subset(select = c("label", "est", "se", "pvalue")) |>
  subset(subset = grepl("lam", label) |
                  grepl("rel", label)) |>  
  within(label <- c(paste0("\\lambda_", 1:3),
                    "Rel.")) |>
  within(pvalue <- sprintf("%.3f", pvalue)) |>  
  print()


cfaFN <- paste0(c("CFI = ", "TLI = ", "RMSEA = ", "SRMR = "),
                  sprintf("%.3f",cfaFit[c("cfi", "tli", "rmsea", "srmr")]),
                  collapse = ", ")
cfaFN

```

## Print the CFA Table 

```{r}
#| label: tbl-cfaRes
#| echo: true
#| tbl-cap: "Results of Confirmatory Factor Analyses"
#| output: asis
#| output-location: column-fragment

cfaResults |>
  flextable() |>
  theme_apa() |> #<5>
  set_header_labels( #<6>
    "label" = "Parameter", #<6>
    "est" = "Estimate",  #<6>
    "se" = "SE", #<6>
    "pvalue" = "p") |> #<6>
  compose(j = "label", i = 1:3,
          value = as_paragraph((as_equation(label)))) |> 
  add_footer_lines( #<8>
    as_paragraph(as_i("Note. "), #<8>
                 cfaFN) #<8>
      ) |> #<8>
  align(align = "left", part = "footer")

```

::: aside

```{r}
#| label: inst-equatags
#| eval: false
#| echo: true
#| code-line-numbers: false
#| code-fold: show
install.packages("equatags")
```

:::

## References {#cfa-ref}

::: {#refs}
:::