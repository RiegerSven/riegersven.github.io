---
date: 04/13/23
published-title: "Last updated on"
abstract: |
  This part gives a not so short introduction to `Quarto`. This introduction is based on the [https://quarto.org](https://quarto.org/docs/authoring/markdown-basics.html) website. Sometimes the topics are introduced a bit shorter, sometimes complementary information is provided. Most sub-sections provide the hyperlink to the respective `Quarto` sub-website.  
---


# A not so short introduction to Quarto


::: {.callout-tip collapse="show" title="Tip for RMarkdown user"}

If you are familiar with RMarkdown [@R-rmarkdown] the [FAQ for RMarkdown Users](https://quarto.org/docs/faq/rmarkdown.html) might be interesting for you.

:::

## What is Quarto? {#what-is-quarto}

![](../../images/quarto.PNG){width=80% fig-align="center"}

But, what is [Pandoc](https://pandoc.org/)? `Pandoc` is a universal document converter. It converts files from one markup format into another (e.g., `markdown` &rarr; `HTML`).

In short, with `Quarto` you can create different types of (reproducible) documents^[Note: It is also possible to generate, presentations (e.g., powerpoint, beamer), websites, books and even interactive components.] including:

- HTML

- PDF 

- MS Word

- Markdown

The focus of this workshop is on **HTML** (and **PDF**) documents. For an overview about all formats see [here](https://quarto.org/docs/output-formats/all-formats.html){target="_blank"}.

## How to work with Quarto?

- It is basically the same^[Nevertheless, it (probably) will take some time to get familiar with it] as working in regular a R-script.
  - Open a new file: `File > New File > Quarto Document...`

::: {.callout-caution collapse="true"}

## Exercise: Create your first Quarto document!

1. Provide a title (& author name)

![](../../images/create-quarto.PNG)

2. Save the document with a reasonable name and use the `Render` button

![](../../images/my-first-quarto-document.PNG)

:::

- A quarto document roughly consists of two parts:
  - The [YAML header](#yaml-header)
  - The [Body](#quarto-body)

- The website [quarto.org](https://quarto.org){target="_blank"} is a great resource to learn it (e.g., follow the [guide](https://quarto.org/docs/guide/){target="_blank"}). It is a *daily* companion and covers the topics in much greater detail than this page. 

## The YAML header {#yaml-header}

The `YAML`^[YAML is an acronym for Yet Another Markup Language see [https://en.wikipedia.org/wiki/YAML](https://en.wikipedia.org/wiki/YAML){target="_blank"}] header is enclosed by three dashes (`---`):

```yaml
---
title: "my-first-quarto-document"
format: html
---
```

### Overview of YAML syntax

The basic syntax of `YAML` uses so-called key-value pairs in the format `key: value`. This is extremely powerful, because you can generate great documents like this `Quarto book` without knowing much about `HTML`, `LATEX` or programming in general.

Some useful key-value pairs:

```yaml
subtitle: "my subtitle"
author:
  - "John Doe"
  - "Jane Roe"
  - "Norah Jones"
date: today
toc: true
toc-title: "Inhaltsverzeichnis"
number-sections: true
```

::: {.callout-caution collapse="true"}

## Exercise: Identify useful key-value pairs

1. For the next 5 minutes or so, check out [https://quarto.org](https://quarto.org){target="_blank"} and identify potential useful `key: value` pairs. Note: There are different `YAML` options for the formats:
    - [HTML](https://quarto.org/docs/output-formats/html-basics.html){target="_blank"}
    - [PDF](https://quarto.org/docs/output-formats/pdf-basics.html){target="_blank"}

2. Add them to your YAML header.

:::


### Citing 

With `Quarto` it is possible to automatically generate citations and bibliographies in many different ways. 

The `key: value` pair to include [citations](https://quarto.org/docs/authoring/footnotes-and-citations.html) in `Quarto` documents is:

```yaml
bibliography: r-refs.bib
```


Here we use a so-called BibLaTex (`.bib`) file. These files can be generated with the most reference management software programs^[If you do not use one, it is time now.] (e.g., [Citavi](https://www.citavi.com/en){target="_blank"}, [EndNote](https://endnote.com/){target="_blank"}, [zotero](https://www.zotero.org/){target="_blank"}, ...).


::: {.callout-tip collapse="true"}
## Random tip on maintenance of literature management

It is highly recommended to maintain your retrieved citations. This means, whenever you download a single (!) reference by means of the `doi` ([Digital Object Identifier](https://www.doi.org/){target="_blank"}), check whether the reference information is correct. This saves a lot of time in the long run.

:::



A reference in the .bib-file looks like this:

```bib
@Manual{R-base,
  title = {R: A Language and Environment for Statistical Computing},
  author = {{R Core Team}},
  organization = {R Foundation for Statistical Computing},
  address = {Vienna, Austria},
  year = {2022},
  url = {https://www.R-project.org/},
}
```


::: {.callout-caution collapse="true"}
## Exercise: Create a .bib file for the R references

1. Check the path with the `base::getwd` function (should be the same folder as the `Quarto` document, otherwise you have to provide the path in the `YAML` `bibliography` argument).

```{r}
#| label: demo-getwd
#| eval: false
#| echo: true
#| code-fold: false
getwd()
```

2. Save (some of the) `R` packages in a character vector.

```{r}
#| label: demo-pkgs
#| echo: true
#| eval: false
#| code-fold: false
pkgList <- c("knitr", # tables
             "kableExtra", # tables
             "lavaan", # generate data
             "car", # recoding
             "psych") # descriptive
```


3. Use the `write_bib` function from the `kntir` package [@R-knitr].

```{r}
#| label: demo-write-bib
#| eval: false
#| echo: true
#| code-fold: false
knitr::write_bib(x = pkgList,
                 file = "r-refs.bib")
```

:::

To change the citation style (e.g., APA, Chicago Manual of Style), we use the `csl key`^[CSL is the abbreviation for Citation Style Language (for more see [https://en.wikipedia.org/wiki/Citation_Style_Language](https://en.wikipedia.org/wiki/Citation_Style_Language){target="_blank"}]:

```yaml
csl: apa.csl
```

The `apa.csl` file can be found on [github](https://github.com/citation-style-language/styles){target="_blank"}.


The citation syntax (How to cite the references in the text?) is briefly explained in the [The Body](#quarto-body) subsection [Citation syntax](#cite-syn).





### Execution/Output options

There are many different options to customize the output of the (executed code).The options can be specified:

  - globally (see in the following)
  - per code block (see the section on [Chunk options](#comp-chunk-opt))

In the following example, we set `echo: false` and `warning: false`. 

```yaml
execute:
  echo: false
  warning: false
```

This means that no code and no warnings are shown, except you state it otherwise in a specific code block.


For more (chunk) options see [https://quarto.org/docs/computations/execution-options.html](https://quarto.org/docs/computations/execution-options.html){target="_blank"}.

## The body {#quarto-body}

As explained in the section [What is Quarto?](#what-is-quarto):

> Quarto is based on Pandoc and uses its variation of markdown as its underlying document syntax (see [https://quarto.org](https://quarto.org/docs/authoring/markdown-basics.html){target="_blank"})

This means we can use `Markdown` syntax^[It is also possible to use `Latex` or `HTML` syntax. However, you most likely run into problems when rendering into the respective other type.] (together with the information in the `YAML` header) to generate the different types of documents (e.g., HTML, PDF, ...).

::: {.callout-caution collapse="true"}

## Exercise: Work through the [Markdown language](#md-lang) section and the three subsections... 

1. [Text formatting](#md-txt-format)

2. [Headings](#md-head)

3. [Lists](#md-lists)

The information is very dense, so do not expect to remember everything.

:::

### Markdown language {#md-lang}

There are plenty of different guides to get a quick overview about the language (see e.g., [markdownguide](https://www.markdownguide.org/basic-syntax/){target="_blank"}, or [Quarto-website](https://quarto.org/docs/authoring/markdown-basics.html){target="_blank"}). The following code snippets are copied and sometimes slightly adjusted from [https://quarto.org](https://quarto.org/docs/authoring/markdown-basics.html){target="_blank"}.

#### Text formatting {#md-txt-format}

+-----------------------------------+-------------------------------+
| Markdown Syntax                   | Output                        |
+===================================+===============================+
|     *italics* and **bold**        | *italics* and **bold**        |
+-----------------------------------+-------------------------------+
|     superscript^2^ / subscript~2~ | superscript^2^ / subscript~2~ |
+-----------------------------------+-------------------------------+
|     ~~strikethrough~~             | ~~strikethrough~~             |
+-----------------------------------+-------------------------------+
|     `verbatim code`               | `verbatim code`               |
+-----------------------------------+-------------------------------+

#### Headings {#md-head}

To create headings, add one (or more) `#` in front of the heading.

+---------------------+-----------------------------------------------+
| Markdown Syntax     | Output                                        |
+=====================+===============================================+
|     # Header 1      | # Header 1 {.heading-output .unnumbered}      |
+---------------------+-----------------------------------------------+
|     ## Header 2     | ## Header 2 {.heading-output .unnumbered}     |
+---------------------+-----------------------------------------------+
|     ### Header 3    | ### Header 3 {.heading-output .unnumbered}    |
+---------------------+-----------------------------------------------+

```{=html}
<style type="text/css">
.heading-output {
  border-bottom: none;
  margin-top: 0;
  margin-bottom: 0;
}
</style>
```

This goes up to level 6 (i.e., `######`) which probably is not recommended to use though.

#### Lists {#md-lists}

+-------------------------------------+---------------------------------+
| Markdown Syntax                     | Output                          |
+=====================================+=================================+
|     * unordered list                | -   unordered list              |
|         + sub-item 1                |                                 |
|         + sub-item 2                |     -   sub-item 1              |
|             - sub-sub-item 1        |                                 |
|                                     |     -   sub-item 2              |
|                                     |                                 |
|                                     |         -   sub-sub-item 1      |
+-------------------------------------+---------------------------------+
|     1. ordered list                 | 1.  ordered list                |
|     2. item 2                       |                                 |
|         i) sub-item 1               | 2.  item 2                      |
|              A.  sub-sub-item 1     |                                 |
|                                     |     i)  sub-item 1              |
|                                     |                                 |
|                                     |         A.  sub-sub-item 1      |
+-------------------------------------+---------------------------------+

More example can be found on [https://quarto.org/docs/authoring/markdown-basics.html#lists](https://quarto.org/docs/authoring/markdown-basics.html#lists){target="_blank"}.

### Cross-referencing

To make a figure, table, equation, ..., or section/heading referenceable, it is necessary to provide unique identifier. Identifiers **must** start with their type (e.g., `#fig-`, `#tbl-`, `#eq-`), except for headers (see in the following example):

When we want to cross-reference the **Images** section, we have to provide unique identifier that is enclosed by braces `{}` (here: `#include-images`) after the heading:

```markdown
## Images {#include-images} 
```

An example on how to reference figures is shown in the [Images](#include-images) section.

For more on cross-referencing (e.g., how to make sub-figures) see again [https://quarto.org/docs/authoring/cross-references.html](https://quarto.org/docs/authoring/cross-references.html){target="_blank"}.

### Images {#include-images}

One way to include images is as follows:

```md
![Here goes the caption](/path-to-file/myImage.png){#fig-myImage}
```

The caption `[Here goes the caption]` and label `{#fig-myImage}` make this figure referenceable. To reference it, use the following syntax:

```md
See @fig-myImage for a graphical representation.
```

It renders to:

See @fig-cfa-model for a graphical representation.

![Here goes the caption](../../images/cfa.svg){#fig-cfa-model width="50%"}


::: {.callout-tip collapse="true"}
## Tip. There are a few other options to include images...

One of them is the `include_graphics` function from the `knitr` package [@R-knitr]:

```{r}
#| label: fig-demo-include
#| eval: false
#| echo: fenced
#| code-fold: false

knitr::include_graphics("path-to-file")
```

It is referenceable via the `label:` `fig-demo-include`. For now ignore the other so-called chunk options (i.e., `eval`, `code-fold`). These are explained in the [Chunk options](#comp-chunk-opt) section.

For more (e.g., `HTML` way `<img> </img>` or `<iframe></iframe>`) see again [https://quarto.org/docs/authoring/figures.html](https://quarto.org/docs/authoring/figures.html){target="_blank"}.

:::




### Citation syntax {#cite-syn}

Recall a reference in the .bib-file looks like this:

```bib
@Manual{R-base,
  title = {R: A Language and Environment for Statistical Computing},
  author = {{R Core Team}},
  organization = {R Foundation for Statistical Computing},
  address = {Vienna, Austria},
  year = {2022},
  url = {https://www.R-project.org/},
}
```

To cite the `R` program, use `@` before the so-called BibLaTex key `R-base`. Three example follow:

1. `[@R-base]` renders as: [@R-base]
2. `@R-base` renders as: @R-base
3. `[-@R-base]` renders as: [-@R-base]

Multiple citations are separated by semicolons: 

4. `[@R-base; @R-knitr]` renders as: [@R-base; @R-knitr]

For more information on the citation syntax see the [Pandoc Citations](https://pandoc.org/MANUAL.html#citations){target="_blank"} documentation.

### There is a lot more!

- Technical writing (e.g., Equations): Use `$` delimiters for inline math and `$$` delimiters for display math (see [https://quarto.org](https://quarto.org/docs/visual-editor/technical.html){target="_blank"})

- Links: 
  - `[This is a link to google.de](www.google.de)` which appears as [This is a link to google.de](www.google.de)
  - `<https://quarto.org>` which appears as <https://quarto.org>

- Diagrams (e.g., [Mermaid](https://mermaid.js.org/#/){target="_blank"},[Graphviz](https://graphviz.org/){target="_blank"})

- Videos

- ...


## Computations

::: {.callout-note}

When using `R`, `Quarto` uses the [Knitr](https://yihui.org/knitr/){target="_blank"} engine^[`Quarto` also supports the [Jupyter](https://jupyter.org/){target="_blank"}  engine.] to execute `R` code. 

:::



### R code blocks (or chunks) {#comp-codeblock}

Within a `Quarto` document source code^[`Quarto`/`Pandoc` supports displaying (!) many different programming languages (see [here](https://github.com/jgm/skylighting/tree/master/skylighting-core/xml){target="_blank"})] can be displayed by using  ` ``` ` at the start and the end of the code. 


The starting ` ``` ` are followed by braces around the programming language (e.g., ` ```{python} `)

`R` code is included by using braces around the **letter r** (i.e., ` ```{r} `; the Windows shortcut is `Ctrl+Shift+I`)

This looks like this:

```{r}
#| label: fig-example-ggplot
#| echo: fenced
#| fig-cap: "My first ggplot"
#| results: hold


library(ggplot2)

ggplot(data = diamonds,
       aes(y = carat, x = price, color = cut)) +
  geom_point() +
  labs(y = "Carat", x = "Price", color = "Cut") +
  theme_classic()


```


::: {.callout-caution}
## Exercise: Create your first `R` code block.


:::


### Chunk options^[see also here: [https://yihui.org/knitr/options/](https://yihui.org/knitr/options/){target="_blank"}] {#comp-chunk-opt}

What are chunk options? Chunk options customize the output of the code blocks. In `Quarto` it is recommended^[The `rmarkdown` syntax is different (e.g., `{r my-label, echo = FALSE}`), but it also works in `Quarto`.] to include the chunk options as special comments (i.e., `|#`)  at the top of the chunk.

In the following example, we set `output: false`...

```{r}
#| label: my-first-chunk
#| echo: fenced
#| output: false

print("hello world!")
```

... and hence, no output is shown.

The most common chunk options are:

+--------------+-----------------------------------------+-----------------------+
| Chunk option | Description                             | Value                 |
+==============+=========================================+=======================+
| `echo`       | Include the source code in output       | `true/false/fenced`   |
+--------------+-----------------------------------------+-----------------------+
| `eval`       | Evaluate the code chunk.                | `true/false`          |
|              | If `false` the code of the              |                       |
|              | chunk will not be executed,             |                       |
|              | but depending on the `echo` value       |                       |
|              | be displayed or not.                    |                       |
+--------------+-----------------------------------------+-----------------------+
| `include`    | Include source code &(!) results        | `true/false`          |
|              | in the output.                          |                       |
+--------------+-----------------------------------------+-----------------------+
| `results`    | Should results be displayed in the      | `markup/asis/hold/`   |
|              | output or not (`false`)?                |  `hide/false`         |
|              | If yes how (`markup` vs. `asis`)?       |                       |
+--------------+-----------------------------------------+-----------------------+
| `warnings`   | Include warnings in output.             | `true/false`          |
+--------------+-----------------------------------------+-----------------------+



### Rendering

There are a [couple of ways](https://quarto.org/docs/computations/r.html#rendering){target="_blank"} to render a `Quarto` document:

1. Clicking the **Render** Button or using the keyboard shortcut (windows): `Ctrl+Shift+K`^[For Mac it is: `Cmd+Shift+K`]

2. Using the terminal
    - `quarto render script.qmd --to html`
    - `quarto render script.qmd --to pdf`
    - ...

3. Using the `quarto_render` function from the `quarto` [@R-quarto] package


::: {.callout-important}
When rendering a `Quarto` document, the `R` code chunks are executed (except you stated: `eval: false`). 
:::





