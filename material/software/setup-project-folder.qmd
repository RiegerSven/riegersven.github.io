---
title: "Setup a project folder"
author: "Sven Rieger"
date: 04/13/23
published-title: "Last updated on"
abstract: |
  This part gives a brief introduction in how to setup a project folder for any data-related projects.  
code-line-numbers: false
---


::: {.callout-warning}

This page under active development.

:::

# Structure of project folder {#structure-folder}

The structure of a project folder should look anything like in the following example. Different components of a project (i.e., data, code, and output-files) should be stored in different directories.

```css
ProjectName/
├── data/
│   ├── raw/
│   │   ├── rawData-1.csv
│   │   ├── rawData-2.csv
│   │   └── ...
│   ├── processed/
│   │   ├── 01_dataCleaning.csv
│   │   ├── 02_dataTransformation.csv
│   │   └── ...
├── code/
│   ├── scripts/
│   │   ├── 01_dataCleaning.qmd
│   │   ├── 02_dataTransformation.qmd
│   │   ├── 03_analysis.qmd
│   │   └── ...
├── output/
│   ├── figures/
│   │   ├── histogram.png
│   │   ├── resultPlot.png
│   │   └── ...
│   ├── tables/
│   │   ├── summaryTable.csv
│   │   └── ...
│   └── reports/
│       ├── analysisReport.qmd
│       ├── analysisReport.pdf
│       └── ...
└── docs/
    ├── README.md
    ├── dataDictionary.md
    ├── codebook.md
    ├── license.md
    └── ...
```

To enhance the reproducibility of the project a neat documentation is essential to follow the steps made in the project. 


::: aside

`.md` = markdown, `.qmd` = quarto-markdown, `.csv` = comma-separated-values-format, `.png` = portable-network-graphics, `.pdf` = portable-document-format

:::

# Working with (R-) Projects {#r-proj}

-   Projects...
    -   help to organize the files
    -   file path referencing is neat (no more `setwd`)
    -   make version control & package management easier

-   Create a project in `RStudio`: `File > New Project...`

![](../images/new-proj-wizz.PNG){fig-align="center" width=80%}

![](../images/project-type.PNG){fig-align="center" width=80%}

![](../images/name-rproj.PNG){fig-align="center" width=80%}


For all (data-related) projects, it is highly recommended to use [Git](https://git-scm.com/) as a version control system and a library/package to create reproducible environments (for `R` projects this would be, for example, the `renv` package, @R-renv).

::: aside
For more see [R for Data Science](https://r4ds.had.co.nz/workflow-projects.html) by Hadley Wickham & Garrett Grolemund.
:::

# Version control: [Git](https://git-scm.com/) {{< fa brands git-alt >}}

## What is version control and why should you use it?

Tracking and recording changes for all kind of files (within a project) over time

:::: {.columns}
::: {.column width="60%"}

::: {.fragment .fade-up fragment-index=1}
- **Backup**: Records the history of your project and allows for easy recovery of earlier versions
:::

::: {.fragment .fade-up}
- **Collaboration**: It allows multiple people to work on the same project without overwriting each other's work.
:::

::: {.fragment .fade-up}
- **Understanding & Traceability**: It helps to track why changes were made, who made them, and when
:::

:::
::: {.column width="1%"}
:::

::: {.column width="39%"}

::: {.fragment fragment-index=1}
![Time machine analogy^[Image was created with ChatGPT]](../images/chatgpt-time-machine.png){fig-align="left" width=80%}
:::

:::
::::

::: {.fragment .fade-up}
> “Track Changes” features from Microsoft Word on steroids (<https://happygitwithr.com/big-picture>)
:::

## Git basics

:::: {.columns}
::: {.column width="49.5%"}

::: {.fragment .fade-up}
1. **Repository (Repo)**: The place where your project lives. It contains all the files and the entire revision history.
:::
::: {.fragment .fade-up}
2. **Commit**: Making a commit is making a snapshot of your repository at a specific time point. Each commit records the current state of your project and has a unique identifier.
:::
::: {.fragment .fade-up}
3. **Branch**: A branch may be a separate line of project development (e.g., to try out new ideas in a isolated area). The 'main' (or previous 'master') branch is usually considered the definitive branch.
:::
:::
::: {.column width="1%"}
:::
::: {.column width="49.5%"}
::: {.fragment .fade-up}
4. **Merge**: Merging means to incorporate changes from a different branch into the the main branch.
:::
::: {.fragment .fade-up}
5. **Pull Request**: When collaborating, you make changes in your branch and then ask others to review and merge them. This request is called a pull request.
:::
::: {.fragment .fade-up}
6. **Clone**: Making a local copy of a remote repository. 
<!-- For example, creating a repo on GitHub and then clone it to a local folder on your computer. -->
:::

::: {.fragment .fade-up}
7. **Fork**: Copy a project from somebody else without affecting the original project.
:::

:::
::::

::: aside

<https://happygitwithr.com/git-intro>

:::

## Git in RStudio I

:::: {.columns}
::: {.column width="49.5%"}

![](../images/rstudio-git-I.PNG)



:::
::: {.column width="1%"}
:::

::: {.column width="49.5%"}

1. Download & install [Git](https://git-scm.com/): <https://git-scm.com/downloads>
2. Go to Tools > Global Options
3. Click Git/SVN
4. Click Enable version control interface for RStudio projects
5. If necessary, enter the path for your Git where provided.

::: {.fragment}

![](../images/rstudio-git-II.PNG)

:::


:::

::::

## Git in RStudio II

Enable it when creating a `R` project: Click 'Create a git repository'

![](../images/name-rproj.PNG)

## Combine it with GitHub {{< fa brands github >}}

GitHub provides a home for Git-based projects and allows other people to see the project 

::: aside

Happy Git and GitHub for the useR: <https://happygitwithr.com/>

:::

# The `renv` package 

What does the `renv` package [@R-renv] do to create a reproducible environment for `R` projects? 

It...

- creates a separate library for each project (instead of having one library containing the packages used in all projects) 
   
- creates a lockfile (i.e., `renv.lock`) that records metadata about all packages

- creates a `.Rprofile` file that is automatically run every time you start the project

::: {.callout-important title="No panacea for reproducibility" appearance="simple"}

`renv` does not provide help with the `R` version, `Pandoc` (R Markdown and Quarto rely on pandoc) and the operating system, versions of system libraries, compiler versions

:::

::: aside

<https://rstudio.github.io/renv/articles/renv.html>

::::

## `renv` package in R projects (within R Studio) I

Use it when creating a `R` project: Click 'Use renv with this project'

![](../images/name-rproj.PNG)

## `renv` package in R projects (within R Studio) II

Or use functions from the package to set up a project infrastructure:

```{r}
#| label: renv-1
#| echo: true
#| eval: false
#| output-location: column
renv::init()
```