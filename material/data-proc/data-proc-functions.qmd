---
title: "Functions in R"
date: 10/25/24
published-title: "Last updated on"
abstract: |
  Writing functions is the best way to enhance your data processing skills. Functions allow you to automate tasks that are needed to be repeated more than 2-times. This sections gives a brief introduction in writing your own functions. There are other sources that cover this topic in much more detail (see [R for Data Science](https://r4ds.had.co.nz/functions.html?q=functions#functions) by [Hadley Wickham](https://hadley.nz/) & [Garrett Grolemund](https://www.rstudio.com/authors/garrett-grolemund/)). 
format:
  html: default
#  revealjs:         
#    output-file: data-proc-functions-reveal.html
#    footer: "[Back to website](<https://riegersven.github.io/material/data-proc/data-proc-functions.html>)"
#    self-contained: true
#    smaller: true
#    scrollable: true
#    navigation-mode: linear
#    progress: true
#    keyboard: true
#    controls: true
#    controls-tutorial: true
#    controls-layout: edges
#    mouse-wheel: false
#    slide-number: c/t
#    show-slide-number: all
#    reference-location: document
#    theme: [simple, "../revealjs-styles.scss"]
---


<!--
::: {.content-hidden when-format="revealjs"}

## Revealjs Presentation

If you want to see the presentation in full screen go to **Other Formats** on the right. The presentation can be downloaded <a href="data-proc-functions-reveal.html" download>here</a>.

<div class="container">
  <iframe class="responsive-iframe" src="data-proc-functions-reveal.html"></iframe>
</div> 

:::

-->

## Why you should avoid copy/paste and use functions instead

>
> One of the best ways to improve your reach as a data scientist is to write functions. [Functions allow you to automate common tasks in a more powerful and general way than copy-and-pasting]{.fragment .highlight-blue}. Writing a function has four big advantages over using copy-and-paste: 
>
> 1. You can give a function an evocative name that makes your code easier to understand.
>
> 2. As requirements change, you only need to update code in one place, instead of many.
> 
> 3. You eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but > not in another).
>
> 4. It makes it easier to reuse work from project-to-project, increasing your productivity over time.



::: aside

see R for Data Science (2e), Chapter [25](https://r4ds.hadley.nz/functions)

:::

## What is a function in `R`? {#function-in-r}

::: {.callout-tip appearance="simple"}

A function is an object that may contain multiple related operations, statements and functions. These are executed in a predefined order. 

Functions in `R` can be created using the `function()` statement and consist of roughly 3 parts:

1. **name** of the function
2. **arguments and parameters**: may vary across calls of the function
3. **body** that contains the code which is executed across function calls

In addition, you might want to include warning, and/or error messages.

:::


```{r}
#| label: function-1
#| echo: true
#| eval: false
#| output-location: column
name <- function( arguments ) {

  body 

}

```

::: aside

::: {.content-visible when-format="revealjs"}

<br>

:::

<https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Function-objects>

:::


## How to write a function? {auto-animate=true}

**Example:** A function that calculates scale scores for a set of item indicators.

### Step 1

Provide a concise and meaningful name (here: `calcScaleScore`). The name of the function object will--after defining the function--appear in the `R` environment.

```{r}
#| label: function-2
#| echo: true
#| eval: false
calcScaleScore <- function( arguments ) {

  body 

}

```



::: {.content-hidden when-format="html" unless-format="revealjs"}

## How to write a function? {auto-animate=true}

**Example:** A function that calculates scale scores for a set of item indicators.

:::

### Step 2

Define the inputs and arguments of the function. These are written within the regular brackets `(...)`. When needed, prepare `if` conditions.


```{r}
#| label: function-3
#| echo: true
#| eval: false
calcScaleScore <- function( data,
                            items,
                            score = "sum" ) {
  
  if (score == "sum") {

  } else if ( score == "mean" ) {

  } else {

    stop("score argument must be either 'sum' or 'mean'")

  }
}

```



::: {.content-hidden when-format="html" unless-format="revealjs"}

## How to write a function? {auto-animate=true}

**Example:** A function that calculates scale scores for a set of item indicators.

:::

### Step 3

Provide code in body of the function. Write it between the curly brackets `{ }`. Do not forget to `return()` the results.

```{r}
#| label: function-4
#| echo: true
#| eval: true
calcScaleScore <- function( data,
                            items,
                            score = "sum" ) {

  if (score == "sum") {

    ret <- rowSums(data[,items])

  } else if ( score == "mean" ) {

    ret <- rowMeans(data[,items])

  } else {

    stop("score argument must be either 'sum' or 'mean'")

  }

  return(ret)

}



```



::: {.content-hidden when-format="html" unless-format="revealjs"}

## How to write a function? {auto-animate=true}

**Example:** A function that calculates scale scores for a set of item indicators.

:::

### Step 4

Test the function. 

::: {.callout-note appearance="simple" title="Do you need data?" collapse="true"}

A simulated data set (`wideLSdat`) can be found in the [Example Data](../example-data/data-latent-state.qmd) section.

```{r}
#| label: func-import-wideLSdat 
#| echo: false

wideLSdat <- readRDS("../example-data/wideLSdat.RDS") 
```

```{r}
#| label: func-head-wideLSdat
#| code-line-numbers: false
head(wideLSdat[,1:6])
```

Quickly create a named list.

```{r}
#| label: wideLSVar
wideLSVar <- list("Y1" = paste0("Y", 1:3, 1),
                  "Y2" = paste0("Y", 1:3, 2),
                  "Y3" = paste0("Y", 1:3, 3))
wideLSVar
```

:::


```{r}
#| label: function-5
#| echo: true
#| eval: true

wideLSdat$Y1 <- calcScaleScore(data = wideLSdat,
                               items = wideLSVar$Y1,
                               score = "sum")

```

Evaluate the results.

```{r}
#| label: function-6
#| echo: true
rowSums(wideLSdat[, wideLSVar$Y1]) == wideLSdat$Y1 |>
  table( )
```

## Input validation

Useful... :)! 

::: {.callout-caution appearance="simple" icon="true" title="Exercise (15min): Input validation" collapse="false"}

Add an input validation that all items exist in the data set. Bonus: Print the missing items

```{r}
#| label: exercise-solution
#| code-fold: true
#| code-summary: "Show solution"
calcScaleScore <- function( data,
                            items,
                            score = "sum" ) {

  validItems <- items %in% colnames(data)
  
  missingItems <- items[!validItems]
  
  if (length(missingItems) > 0) {

      stop("The following item(s) is/are not in the dataset: ",
           paste(missingItems, collapse = ", "))

    }

  if (score == "sum") {

    ret <- rowSums(data[,items])

  } else if ( score == "mean" ) {

    ret <- rowMeans(data[,items])

  } else {

    stop("score argument must be either 'sum' or 'mean'")

  }

  return(ret)

}

```



:::

