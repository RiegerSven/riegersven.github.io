---
title: "Loops in R"
date: 10/25/24
published-title: "Last updated on"
abstract: |
  Looping is the repeated evaluation of a statement or block of statements. 
format:
  html: default
 # revealjs:         
 #   output-file: data-proc-loops-reveal.html
 #   footer: "[Back to website](<https://riegersven.github.io/material/data-proc/data-proc-loops.html>)"
 #   self-contained: true
 #   smaller: true
 #   scrollable: true
 #   navigation-mode: linear
 #   progress: true
 #   keyboard: true
 #   controls: true
 #   controls-tutorial: true
 #   controls-layout: edges
 #   mouse-wheel: false
 #   slide-number: c/t
 #   show-slide-number: all
 #   reference-location: document
 #   theme: [simple, "../revealjs-styles.scss"]
---

<!--

::: {.content-hidden when-format="revealjs"}

## Revealjs Presentation

If you want to see the presentation in full screen go to **Other Formats** on the right. The presentation can be downloaded <a href="data-proc-functions-loops.html" download>here</a>.

<div class="container">
  <iframe class="responsive-iframe" src="data-proc-functions-loops.html"></iframe>
</div> 

:::

-->

## What is a loop (in `R`)?

::: {.callout-tip appearance="simple"}

Looping is the repeated evaluation of a statement or block of statements. Base `R` provides functions for explicit (i.e., `for`, `while`, `repeat`)  and implicit looping (e.g., `apply`, `sapply`, `lapply`,...). There are also other packages (e.g., `parallel`, `purrr`, `furrr`) that offer more advanced or parallelized looping capabilities, providing more efficient and convenient ways to iterate over data, particularly for complex workflows or large datasets. 

:::


::: aside

<https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Looping>

:::

## lapply

We begin by using the `lapply` function that applies a function over a list or vector. The function needs 2 arguments as inputs:

- `X`: a vector (atomic or list) 
- `FUN`: the function to be applied to each element of `X`

`lapply` returns a list of the same length as the input `X` (see `?lapply`).

**Two (nearly equivalent) examples with `lapply`**:

::: {.panel-tabset}

### Example 1 (short)

```{r}
#| label: lapply-1
#| echo: true
#| eval: true
#| output-location: column
printList1 <- lapply(X = 1:3,
                     FUN = print) 
```

### Example 2 (a bit longer, but preferred)

```{r}
#| label: lapply-2
#| echo: true
#| eval: true
#| code-annotations: hover
#| output-location: column
printList2 <-  lapply(X = 1:3,
                      FUN = function(x) { # <1>
                        ret <- x^2 |> # <2>
                                print() # <2>
                        return(ret) 
                       }
                    ) 
```


1. Defines an so-called anonymous function that takes an argument `x`. 
2. This approach offers further customization of operations such as calculating the square of `x` (for more see [Functions in R](#data-proc-functions.qmd)).


::: {.callout-note appearance="simple" title="Use your own function with apply family."}

If the `function()` becomes more complex, it might be better to define it separately (and save in your `src` folder, see the section on [Structure and Create the Project Folder(s)](../software/setup-project.qmd#structure-project-folder)).

:::

:::



## Example: Calculating many scale scores 

In this example, we calculate many scale scores by using a named list and the `sapply` function. `sapply` is a user-friendly version and wrapper of lapply by default returning a vector, matrix or, if `simplify = "array"`, an array [...]. 

::: {.callout-note appearance="simple" title="To follow this example, you need..." collapse="true"}

- The `calcScaleScore` function that is explained in the section [What is a function in `R`?](data-proc-functions.qmd#function-in-r).

```{r}
#| label: calcScaleScore-function
#| code-fold: show
calcScaleScore <- function( data,
                            items,
                            score = "sum" ) {

  validItems <- items %in% colnames(data)
  
  missingItems <- items[!validItems]
  
  if (length(missingItems) > 0) {

      stop("The following item(s) is/are not in the dataset: ",
           paste(missingItems, collapse = ", "))

    }

  if (score == "sum") {

    ret <- rowSums(data[,items])

  } else if ( score == "mean" ) {

    ret <- rowMeans(data[,items])

  } else {

    stop("score argument must be either 'sum' or 'mean'")

  }

  return(ret)

}

```


- A simulated data set (`wideLSdat`) that can be found in the [Example Data](../example-data/data-latent-state.qmd) section.

```{r}
#| label: loop-import-wideLSdat 
#| echo: false

wideLSdat <- readRDS("../example-data/wideLSdat.RDS") 
```

- a named list (`wideLSVar`).

```{r}
#| label: loop-wideLSVar
#| code-fold: show
wideLSVar <- list("Y1" = paste0("Y", 1:3, 1),
                  "Y2" = paste0("Y", 1:3, 2),
                  "Y3" = paste0("Y", 1:3, 3))
wideLSVar
```

:::

```{r}
#| label: loop-scalescores

wideLSdat[,names(wideLSVar)] <- sapply(
                X = wideLSVar,
                FUN = function(x) {
                                        
                    ret <- calcScaleScore(data = wideLSdat,
                                          items = x)
                                        
                    return(ret)
                },simplify = F)

head(wideLSdat[,names(wideLSVar)])
```


## When not to loop?

**Answer:** If vectorization is possible...

**Example:** Create a large vector (10 million random values) and multiply it by 2.

```{r}
#| label: vectorization-0
#| code-line-numbers: false
set.seed(999)
x <- rnorm(1e7)  

```

:::: {.columns}

::: {.column width="49.5%"}

**Loop approach**

```{r}
#| label: vectorization-1
system.time({

  y <- numeric(length(x))

  for (i in 1:length(x)) {
    y[i] <- x[i] * 2
  }

})

```

:::

::: {.column width="1%"}

:::

::: {.column width="49.5%"}

**Vectorizized approach**

```{r}
#| label: vectorization-2
system.time({

  y <- x * 2

})

```

:::

::::

**But**, How to know that vectorization is possible?

::: aside

For more see here: <https://stackoverflow.com/questions/58568392/how-do-i-know-a-function-or-an-operation-in-r-is-vectorized>

:::

&rarr; Especially, in coding situations where you need to perform the same operation on each element^[so-called element-wise operations] (e.g., vector, matrix): 

- Arithmetic operations (e.g, `+`, `-`, ...)
- Logical comparisons (e.g., `==`, `>`, ...)
- Mathematical functions (e.g., `sqrt()`, `log()`, ...)


## Create Sections in Quarto Programmatically

In this section, we will generate headings by iterating through a named list. The elements of the list will be hyperlinks to [Wikipedia](<https://en.wikipedia.org>), but they can also be other types of content, such as tables or figures.

### Named list

```{r}
#| label: section-input
someInfo <- list(
    "Apples" = "<https://en.wikipedia.org/wiki/Apple>",
    "Bananas" = "<https://en.wikipedia.org/wiki/Banana>",
    "Oranges" = "<https://en.wikipedia.org/wiki/Orange_(fruit)>"
    )
```

### for loop

To generate the sections (recall, headings are created by using `#`, `##`, etc.) for all elements, we use a `for` loop. All content is wrapped in the `cat()` function that concatenates and prints the input to plain text. To tell Quarto to treat the content as raw markdown, we set the `output` option to `asis`. For a more detailed description of the code, see the `code-annotations` below the code.

::: aside

::: {.callout-note appearance="simple" icon="true"}

Be generous with `"\n"` as it creates a new line.

:::

:::

```{r}
#| label: create-section
#| echo: fenced
#| code-fold: show
#| output: asis  # <1>
#| code-annotations: select
for (i in seq_along(someInfo) ) {  # <2> 
    
    if (i == 1) {
        cat("\n### Programmatically generated headings\n")
        }
    
    cat("\n#### ", names(someInfo)[i], "\n") # <3>
    
    cat("In this section, we provide some information about",
        paste0(tolower(names(someInfo)[i]), ".\n"))
    
    cat("\n::: {.column-margin}\n", "Link to wikipedia: ", # <4>
        someInfo[[i]],                                     # <4>
        "\n:::\n")                                         # <4>
    
    cat("\n{{< lipsum 1 >}}\n")  # <5>
}
```

1. Set `output` chunk option to `asis`.
2. Open `for` loop, which iterates through the `someInfo` list.
3. State `#### ` before the `names(someInfo)` object within the `cat()` function to create sections. 
4. (Optional): Positioning content in the [margin](<https://quarto.org/docs/authoring/article-layout.html#margin-content>) of the document: Use a div with the `.column-margin` class.
5. (Optional): [Adding placeholder text:](<https://quarto.org/docs/authoring/lipsum.html>) `{{{< lipsum >}}}`

